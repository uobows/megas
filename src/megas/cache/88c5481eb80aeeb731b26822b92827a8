O:9:"MagpieRSS":24:{s:6:"parser";i:0;s:12:"current_item";a:0:{}s:5:"items";a:8:{i:0;a:11:{s:2:"id";s:70:"tag:blogger.com,1999:blog-6641324837810394798.post-8245032384788573103";s:9:"published";s:29:"2014-04-14T08:00:00.000-03:00";s:7:"updated";s:29:"2014-04-14T08:56:48.843-03:00";s:5:"title";s:37:"Realizar Consultas con LINQ (parte 2)";s:12:"atom_content";s:6009:"<div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Continuando con esta entrega sobre las posibilidades que nos ofrece LINQ para realizar consultas, comenzaremos viendo de que manera simple pueden realizarse agrupamiento de datos.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif; font-size: x-small;"><b>(Ir a primer parte click <a href="http://netdesa.blogspot.com/2014/04/realizar-consultas-con-linq-parte-1.html">aqui</a>)</b></span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Tomando como base la clase empleado que utilizamos en la primer parte de esta entrega, podemos ver a continuación de que manera LINQ simplifica&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">enormemente el proceso de agrupar datos, utilizando una sintaxis similar al GROUP BY de SQL.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-nAdMAusIpWA/U0nVVZyoVtI/AAAAAAAALq4/7ckAvHYDqk0/s1600/captura21.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-nAdMAusIpWA/U0nVVZyoVtI/AAAAAAAALq4/7ckAvHYDqk0/s1600/captura21.PNG" height="118" width="320" /></a></div><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Por otro lado, LINQ hace posible que se pueden ejecutar sobre cualquier objeto enumerable, muchos operados similares a los operadores que se encuentran en SQL, tales como&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">Count, Min, Max, Avarage, Sum.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-qf_PC2i6Sng/U0nWYUC160I/AAAAAAAALrA/azR0kAt6iAw/s1600/captura22.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-qf_PC2i6Sng/U0nWYUC160I/AAAAAAAALrA/azR0kAt6iAw/s1600/captura22.PNG" height="95" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Como se ve en el ejemplo se simplifica ampliamente la posibilidad de obtener estos valores, a excepción del Count, que nos devuelve la cantidad total,&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">el resto de los operadores requieren el nombre del campo sobre el cual se efectúa la operación, ello se realiza por medio del uso de la expresión Lambda.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">LINQ suporta la unión de datos desde diferentes colecciones, usando una sintaxis similar a la utilizada por SQL, para ejemplificar esto, creamos una clase GrupoEmpleado,&nbsp;</span><br /><br /><span style="font-family: Trebuchet MS, sans-serif;">para relacionarla con el atributo IdGrupoEmpleado de la Clase Empleado</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-bGn2mukAXBU/U0nW0o5V5rI/AAAAAAAALrI/6dByB8B5s5Q/s1600/captura23.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-bGn2mukAXBU/U0nW0o5V5rI/AAAAAAAALrI/6dByB8B5s5Q/s1600/captura23.PNG" height="82" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-Zu9lMEo4A4M/U0nXDoBY60I/AAAAAAAALrQ/zRWG2X__5JE/s1600/captura24.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-Zu9lMEo4A4M/U0nXDoBY60I/AAAAAAAALrQ/zRWG2X__5JE/s1600/captura24.PNG" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-Nc8_kfzjVz8/U0nXeMHg7tI/AAAAAAAALrY/ZDUZWpZOQ7w/s1600/captura25.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-Nc8_kfzjVz8/U0nXeMHg7tI/AAAAAAAALrY/ZDUZWpZOQ7w/s1600/captura25.PNG" height="127" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><br /></div><br /><span style="font-family: 'Trebuchet MS', sans-serif;">LINQ también nos otorga la posibilidad de realizar paginado de datos fácilmente, por medio de la utilización de los métodos Skip y Take. El primero de ellos, Skip, determina la</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"></span><br /><span style="font-family: Trebuchet MS, sans-serif;">posición del primer item de la lista a considerar, &nbsp;y por medio del método Take, se especifica la cantidad de items que serán retornados en la consulta LINQ.</span><br /><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-zA-DYTWY1_4/U0nXr93_MLI/AAAAAAAALrg/Ejp2deWMva0/s1600/captura26.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-zA-DYTWY1_4/U0nXr93_MLI/AAAAAAAALrg/Ejp2deWMva0/s1600/captura26.PNG" height="98" width="320" /></a></div><div><br /></div><div><span style="font-family: 'Trebuchet MS', sans-serif;">Como puede observarse LINQ nos otorga una espectacular mejora en la legibilidad y comprensibilidad del código.</span></div></div>";s:12:"link_replies";s:159:"http://netdesa.blogspot.com/feeds/8245032384788573103/comments/defaulthttp://netdesa.blogspot.com/2014/04/realizar-consultas-con-linq-parte-2.html#comment-form";s:9:"link_edit";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/8245032384788573103";s:9:"link_self";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/8245032384788573103";s:4:"link";s:76:"http://netdesa.blogspot.com/2014/04/realizar-consultas-con-linq-parte-2.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:1;a:11:{s:2:"id";s:68:"tag:blogger.com,1999:blog-6641324837810394798.post-44466010362862938";s:9:"published";s:29:"2014-04-11T12:34:00.001-03:00";s:7:"updated";s:29:"2014-04-14T08:57:39.391-03:00";s:5:"title";s:37:"Realizar Consultas con LINQ (parte 1)";s:12:"atom_content";s:12109:"<div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Como ya había sido introducido previamente el tema, LINQ (Language Integrated Query), incluye tres tipos básicos de consultas, estos son:</span></div><br /><ol><li style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">LINQ to Objects;&nbsp;</span></li><li style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">LINQ to XLM (XLINQ);&nbsp;</span></li><li style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">LINQ utilizados en contextos de bases de datos, tales como LINQ to SQL o LINQ to Entities.</span></li></ol><br /><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Para analizar más en profundidad algunas de las posibilidades que nos ofrece LINQ, tomaremos el enfoque más simple, LINQ to Objects, este enfoque permite realizar operaciones de consultas complejas en cualquier objeto que soporte la interface IEnumerable.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Para analizar estas cuestiones, comenzaremos definiendo una clase simple: Empleado</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-TmKLJUUdP1c/U0fq0F3trQI/AAAAAAAALoY/IKtKbBs2_q0/s1600/captura01.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-TmKLJUUdP1c/U0fq0F3trQI/AAAAAAAALoY/IKtKbBs2_q0/s1600/captura01.PNG" height="131" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Y posteriormente llenaremos una Lista de clase Empleado, la cual contendrá las instancias de la entidad Empleado.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-T98a3a6kuCc/U0frp7GfReI/AAAAAAAALog/xTahORLhSOc/s1600/captura02.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-T98a3a6kuCc/U0frp7GfReI/AAAAAAAALog/xTahORLhSOc/s1600/captura02.PNG" height="196" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Cargamos el contenido de la Lista de Empleados en una variable genérica, y posteriormente&nbsp;</span><span style="font-family: Trebuchet MS, sans-serif;">lo que se haría, sería enviar la variable a la vista correspondiente, para que el usuario vea los resultados finales (si&nbsp;estuviéramos&nbsp;en una aplicación MVC), o se podría asignar dicha variable al DataSource de una GridView (si estuavieramos trabajando con Web Forms).&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">Para simplemente probar su funcionamiento,</span><span style="font-family: 'Trebuchet MS', sans-serif;">&nbsp;lo que haremos será recorrer el contenido de la variable por medio de un bucle foreach.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-5OgXaZS8x4c/U0frvTjjtHI/AAAAAAAALoo/bi79ZsZclSE/s1600/captura03.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-5OgXaZS8x4c/U0frvTjjtHI/AAAAAAAALoo/bi79ZsZclSE/s1600/captura03.PNG" height="183" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">¿Qué pasaría si desearamos ordenar, agrupar, paginar, dicha lista? Obviamente por medio de unas cuantas líneas de código podríamos hacerlo, pero el código, algunas veces, puede resultar difícil de leer y entender para alguien que no fue el programador, por lo cual se entorpece el mantenimiento del sistema. Es aquí donde entra en juego LINQ.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Por este motivo, partir de ahora, iremos testeando las diversas posibilidades que nos ofrece LINQ, lo primero es generar la consulta LINQ simple de la siguiente manera, como se ve obtenemos un resultado similar al anterior, pero nos servirá como base para los pasos siguientes.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-6MjERjcKWgA/U0fr1D7GBMI/AAAAAAAALow/j-kR057FfRA/s1600/captura04.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-6MjERjcKWgA/U0fr1D7GBMI/AAAAAAAALow/j-kR057FfRA/s1600/captura04.PNG" height="219" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Analicemos en detalle, este ejemplo de LINQ Básico: primero por medio del método ObtenerEmpleados(), se obtiene la variable genérica de List&lt;Empleado&gt;; y posteriormente se realiza una consulta LINQ muy simple para obtener todos los objetos Empleado de la colección de Empleados.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Como puede verse la consulta definió una nueva variable <i>e</i>, esta variable es utilizada de dos maneras dentro de la consulta. Por un lado, definiendo dicha variable <i>e</i>&nbsp;dentro de la sentencia <i>from</i>, le estamos diciendo a LINQ que <i>e</i> representa un item individual dentro de la colección, para el ejemplo <i>e</i> es un objeto Empleado. Por otro lado, utilizando e, dentro de la sentencia <i>select</i> de la consulta, le estamos diciendo a LINQ que genere una salida que se corresponde con la estructura de <i>e</i>, en este ejemplo con la estructura del objeto Empleado.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Con respecto a este último punto, podemos generar una salida personalizada, es decir determinar que campos se quiere que retorne la consulta, para ello utilizamos la palabra reservada new, posterior a la sentencia select, como podemos ver en el siguiente ejemplo:</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-v8mYcDO22y8/U0f19px9PeI/AAAAAAAALpA/jeXMaTupxlA/s1600/captura05.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-v8mYcDO22y8/U0f19px9PeI/AAAAAAAALpA/jeXMaTupxlA/s1600/captura05.PNG" height="132" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">También podemos determinar cuales serán los nombres de los campos que expondrá la salida de nuestra consulta LINQ</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-oJyr-Qpb3M8/U0f2IyzpjFI/AAAAAAAALpI/6hgzx211F_4/s1600/captura06.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-oJyr-Qpb3M8/U0f2IyzpjFI/AAAAAAAALpI/6hgzx211F_4/s1600/captura06.PNG" height="76" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">LINQ incluye la capacidad de ordenar los resultados de nuestra consulta, utilizando la sentencia ORDER BY, y tal colo lo haríamos en una consulta SQL, puede determinarse si los datos se ordenan de manera ascendente o descendente.</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-keAs36-99gs/U0f8zksIrUI/AAAAAAAALpY/vPWhTNHHcJI/s1600/captura07.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-keAs36-99gs/U0f8zksIrUI/AAAAAAAALpY/vPWhTNHHcJI/s1600/captura07.PNG" height="111" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Si deseamos filtrar los datos de nuestra consulta LINQ, solo es cuestion de agregar la sentencia WHERE, tal como vemos a continuación:</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-mgsCmbIeE0w/U0f852b7_5I/AAAAAAAALpg/nT9nuJkWwDg/s1600/captura08.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-mgsCmbIeE0w/U0f852b7_5I/AAAAAAAALpg/nT9nuJkWwDg/s1600/captura08.PNG" height="105" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Si deseamos hacer un filtrado más preciso fácilmente pueden introducirse más condiciones dentro del WHERE de la consulta:</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-lhWch1tSmbo/U0f-SSutyMI/AAAAAAAALps/4GbeAJAfeDQ/s1600/captura09.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-lhWch1tSmbo/U0f-SSutyMI/AAAAAAAALps/4GbeAJAfeDQ/s1600/captura09.PNG" height="105" width="400" /></a></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">En la próxima entrega veremos cuestiones tales como el Agrupamiento de datos, funciones de agregado, paginado de resultados.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif; font-size: x-small;"><b>(Ir a segunda parte click <a href="http://netdesa.blogspot.com/2014/04/realizar-consultas-con-linq-parte-2.html">aquí</a>)</b></span></div>";s:12:"link_replies";s:157:"http://netdesa.blogspot.com/feeds/44466010362862938/comments/defaulthttp://netdesa.blogspot.com/2014/04/realizar-consultas-con-linq-parte-1.html#comment-form";s:9:"link_edit";s:80:"http://www.blogger.com/feeds/6641324837810394798/posts/default/44466010362862938";s:9:"link_self";s:80:"http://www.blogger.com/feeds/6641324837810394798/posts/default/44466010362862938";s:4:"link";s:76:"http://netdesa.blogspot.com/2014/04/realizar-consultas-con-linq-parte-1.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:2;a:11:{s:2:"id";s:70:"tag:blogger.com,1999:blog-6641324837810394798.post-5219925398212935339";s:9:"published";s:29:"2014-03-31T13:25:00.000-03:00";s:7:"updated";s:29:"2014-03-31T13:27:41.142-03:00";s:5:"title";s:27:"Entity Framework Code First";s:12:"atom_content";s:5889:"<span style="font-family: Trebuchet MS, sans-serif;">Code First, de Entity Framework, es el último enfoque agregado al Entity Framework, e introducido en la versión 4.1 del Framework de .NET (Los dos enfoques previos son <a href="http://netdesa.blogspot.com.ar/2014/03/aplicacion-aspnet-mvc-y-adonet-entity.html">Database First</a> y Model First).&nbsp;</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Este enfoque, como su nombre lo dice, se basa en codificar primero, es decir crear clases POCO (Plain Old CLR Objects), utilizando el lenguaje deseado, VB.NET, C#, etc. de las diferentes entidades, y crear relaciones entre las mismas, luego se crea automáticamente la base de datos. Esta es la principal utilidad del EF Code First, aunque también puede utilizarse con Bases de Datos existentes, lo cual nos da un mayor control sobre el código generado, ya que nada será realizado por el asistente.&nbsp;</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">La ventaja principal que posee el enfoque "Code First", es que ya no debemos preocuparnos mas por Transact SQL, ni por la base de datos en sí, ya que la misma será la manera en que se persisten los objetos creados. En síntesis, estaremos programando solamente con C# o VB.NET y LINQ.   </span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-tP0S6qWIOwc/UzmRZvc564I/AAAAAAAAK0k/YQDdrTy-jCk/s1600/codefirst.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-tP0S6qWIOwc/UzmRZvc564I/AAAAAAAAK0k/YQDdrTy-jCk/s1600/codefirst.jpg" height="213" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Para abordar este enfoque, se debe comenzar definiendo nuestras entidades, lo cual puede realizarse como objetos POCO.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-E3tHpOeWkqY/UzmWTLUDAwI/AAAAAAAAK00/PHr1VuN-G8I/s1600/clase_01.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"><img border="0" src="http://4.bp.blogspot.com/-E3tHpOeWkqY/UzmWTLUDAwI/AAAAAAAAK00/PHr1VuN-G8I/s1600/clase_01.JPG" /></a></div><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: 'Trebuchet MS', sans-serif;">Luego de la definición de todas las entidades necesarias, se debe proceder a crear la clase de contexto para interactuar con la base de datos.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-4vOYgfo1bgQ/UzmWTCOeeLI/AAAAAAAAK04/qEMwjtizwWQ/s1600/clase_02.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-4vOYgfo1bgQ/UzmWTCOeeLI/AAAAAAAAK04/qEMwjtizwWQ/s1600/clase_02.JPG" height="61" width="320" /></a></div><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Tratándose de una aplicación web, en nuestro archivo web.config debe determinarse la cadena conexión a la base de datos, dentro de la correspondiente sección &lt;connectionStrings&gt;.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-7arIrqbmAZY/UzmWTGb2JwI/AAAAAAAAK1A/cZhHnbXuVjs/s1600/clase_03.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"><img border="0" src="http://3.bp.blogspot.com/-7arIrqbmAZY/UzmWTGb2JwI/AAAAAAAAK1A/cZhHnbXuVjs/s1600/clase_03.JPG" height="28" width="640" /></a></div><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Posteriormente a esta configuración inicial de nuestro modelo, y sin necesidad de crear siquiera nuestra base de datos en el servidor definido en el web.config, podemos utilizar el modelo, para crear un nuevo empleado, y al llamar al método SaveChanges() de nuestro contexto se procederá a crear la base de datos, la tabla correspondiente en la base de datos y se insertará un registro en la misma.&nbsp;</span><br /><div class="separator" style="clear: both; text-align: center;"><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-vB74uNOoqk0/UzmWUjCt0RI/AAAAAAAAK1E/COu-d1_QG8Y/s1600/clase_04.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-vB74uNOoqk0/UzmWUjCt0RI/AAAAAAAAK1E/COu-d1_QG8Y/s1600/clase_04.JPG" height="34" width="640" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Posteriormente podemos conectarnos al servidor de nuestra base de datos, y verificar que todo ocurrió tal como fue codificado con nuestro EF Code First.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Más adelante entraremos más en detalle en la definición de las clases POCO, para lograr que se realicen las validaciones correspondientes al momento de registrar datos en las entidades y por consecuencia en la base de datos.</span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span>";s:12:"link_replies";s:151:"http://netdesa.blogspot.com/feeds/5219925398212935339/comments/defaulthttp://netdesa.blogspot.com/2014/03/entity-framework-code-first.html#comment-form";s:9:"link_edit";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/5219925398212935339";s:9:"link_self";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/5219925398212935339";s:4:"link";s:68:"http://netdesa.blogspot.com/2014/03/entity-framework-code-first.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:3;a:11:{s:2:"id";s:70:"tag:blogger.com,1999:blog-6641324837810394798.post-3780955796501602430";s:9:"published";s:29:"2014-03-25T08:11:00.000-03:00";s:7:"updated";s:29:"2014-03-25T08:11:59.621-03:00";s:5:"title";s:20:"Introducción a LINQ ";s:12:"atom_content";s:7198:"<span style="font-family: 'Trebuchet MS', sans-serif;">LINQ (</span><span style="font-family: Trebuchet MS, sans-serif;">Microsoft.NET Language Integrated Query) es a la vez un lenguaje, y una extensión del Microsoft .NET Framework.&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">Fue introducido con la versión 3.5 del Framework de .NET, para constituirse en un puente entre la programación de objetos y trabajar con los datos.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">LINQ convierte el acceso a datos y las consultas en un lenguaje construido en Visual Basic o en Visual C#. Provee un modelo consistente para trabajar con los datos sin importar de donde vienen los datos. Por lo tanto la programación con LINQ permite utilizar todas las características propias de la programacion, para hacer el tratamiento de los datos más fácil y consistente.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">LINQ cambia la manera en que accedemos y consultamos datos. Antes que LINQ fuera creado, las mayoría de las consultas se escribían y ejecutaban directamente contra la Base datos, por lo que dicho texto SQL dependía fuertemente de la tecnología subyacente.</span><br /><span style="font-family: Trebuchet MS, sans-serif;">LINQ posee dos ventajas principales:</span><br /><br /><ul><li><span style="font-family: 'Trebuchet MS', sans-serif;">La primera de ellas es que se realiza un chequeo de los objetos LINQ en tiempo de compilación, por lo que es posible de encontrar y descubrir más facilmente los errores, además de la posibilidad de utilizar IntelliSense para hacer más fácil escribir el código fuente.</span></li><li><span style="font-family: 'Trebuchet MS', sans-serif;">La segunda, es que provee un modelo consistente para realizar las consultar contra todas las tecnologías de base de datos, y todo tipo de objetos, incluyendo listas, XML, arrays, etc.</span></li></ul><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-m6ZEadOLVlo/Uyz8Vo3ADbI/AAAAAAAAKw0/gItmrqJHuQc/s1600/LINQ.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-m6ZEadOLVlo/Uyz8Vo3ADbI/AAAAAAAAKw0/gItmrqJHuQc/s1600/LINQ.png" height="138" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><span style="font-family: Trebuchet MS, sans-serif;">LINQ permite realizar consultas a cualquier objeto que soporte la interface, IEnumerable o IEnumerable&lt;T&gt;; lo que serían todas las colecciones de datos, incluídos los DataSet, List&lt;T&gt;, Array y muchos más.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Supongamos que tenemos una lista de objetos Empleado, esta lista es llamada empleados. En dicha lista, por medio de la utilización de LINQ podremos obtener todos los empleados que trabajan en el departamento IT, de la siguiente manera:</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Courier New, Courier, monospace;">IEnumerable&lt;Employee&gt; empQuery = from emp in empleados</span><br /><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;where emp.departamento == "IT"</span><br /><span style="font-family: Courier New, Courier, monospace;"><span class="Apple-tab-span" style="white-space: pre;">    </span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;select emp;</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Los tipos más comunes en los que se puede grabar el resultado de LINQ, son IEnumerable&lt;T&gt; e IQueryable&lt;T&gt;, de todas maneras puede saltarse esta asignación, y utilizar, directamente la palabra reservada var:</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Courier New, Courier, monospace;">var empQuery = from emp in empleados</span><br /><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;where emp.departamento == "IT"</span><br /><span style="font-family: Courier New, Courier, monospace;"><span class="Apple-tab-span" style="white-space: pre;"> </span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; select emp;</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Hay que tener en cuenta, que cuando se asigna la consulta LINQ a una variable sobre es eso, se guarda en la variable, pero no se ejecuta hasta que no se itera a través de la misma, por ejemplo con un bloque foreach</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Courier New, Courier, monospace;">foreach (var emp in empQuery)</span><br /><span style="font-family: Courier New, Courier, monospace;">{</span><br /><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp;Console.WriteLine(emp.departamento);</span><br /><span style="font-family: Courier New, Courier, monospace;">}</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Otras maneras para que la consulta se ejecute, es usar algunas de las funciones de agregación: Count, Max, Average, First.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Courier New, Courier, monospace;">int cant = empQuery.Count();</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">También pueden utilizarse los métodos ToList&lt;T&gt; o ToArray&lt;T&gt; para ejecutar la consulta y guardar los resultados en una lista de objetos o en un array.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Courier New, Courier, monospace;">List&lt;empleado&gt; empQuery = (from emp in empleados</span><br /><span style="font-family: Courier New, Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; where emp.departamento == "IT"</span><span class="Apple-tab-span" style="font-family: 'Courier New', Courier, monospace; white-space: pre;">   </span><span style="font-family: 'Courier New', Courier, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; select emp).ToList();</span><br /><span style="font-family: 'Courier New', Courier, monospace;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span>";s:12:"link_replies";s:141:"http://netdesa.blogspot.com/feeds/3780955796501602430/comments/defaulthttp://netdesa.blogspot.com/2014/03/introduccion-linq.html#comment-form";s:9:"link_edit";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/3780955796501602430";s:9:"link_self";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/3780955796501602430";s:4:"link";s:58:"http://netdesa.blogspot.com/2014/03/introduccion-linq.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:4;a:11:{s:2:"id";s:69:"tag:blogger.com,1999:blog-6641324837810394798.post-401974355383216972";s:9:"published";s:29:"2014-03-21T15:28:00.000-03:00";s:7:"updated";s:29:"2014-03-21T23:17:02.302-03:00";s:5:"title";s:49:"Aplicación ASP.NET MVC y ADO.NET Entity Framework";s:12:"atom_content";s:8645:"<div style="text-align: justify;"><br /></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">En esta entrega, realizaremos una primera aproximación al concepto de Entity Framework, para la creación de un modelo que nos permite efectuar tareas de ABMC: Altas, Bajas, Modificaciones y Consultas, o tal se conoce en idioma inglés operaciones CRUD.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">El Entity Frameword de ADO.NET (EF) permite crear la capa de acceso a datos de una aplicación, abstrayendo los datos desde la base de datos y exponiendo un modelo mas cercano a los requerimientos de negocio de la aplicación.&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">En el Framework 4.0 de NET, el EF ha sido considerablemente mejorado.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">EF implementa el patrón ORM (Mapeo Objeto Relación), mediante el cual los objetos de la base de datos, se mapean con entidades del modelo conceptual de objetos.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Supondremos, que ya tenemos creada nuestra aplicación Web MVC, tal como vimos en entregas previas.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Como primer paso, debemos crear un modelo de datos, que consistirá en una entidad "Empleado". Este modelo se encargará de realizar la comunicación con la base de datos para la gestión de los mismos.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Para esto, sobre la carpeta Models de nuestro proyecto, realizamos click con el botón derecho, y seleccionamos "Agregar Nuevo Elemento..."</span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Dentro del cuadro de dialogo, debemos seleccionar la opción Datos, y seleccionar "ADO.NET Entity Data Model".</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-WNHpXu46iSc/UyyBLGhHodI/AAAAAAAAKv4/bRmbqejFpy4/s1600/screenshot+2.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-WNHpXu46iSc/UyyBLGhHodI/AAAAAAAAKv4/bRmbqejFpy4/s1600/screenshot+2.jpg" height="197" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Debemos determinar si en Entity Data Model , se creará a partir de una &nbsp;base de datos, o crearemos un modelo vacío, para este caso, dado que ya tenemos la tabla en la base de datos, seleccionaremos la primera opción.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-sbXykuGhB0U/UyyBQb4mUCI/AAAAAAAAKwA/enijYOB_89A/s1600/screenshot+3.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-sbXykuGhB0U/UyyBQb4mUCI/AAAAAAAAKwA/enijYOB_89A/s1600/screenshot+3.jpg" height="289" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Seleccionamos la conexión a la base de datos, este paso producirá que se almacene dentro del Web.Config, los datos de la cadena de conexión, con el nombre que se determine.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/--1eadHIaueY/UyyBV2T6vXI/AAAAAAAAKwI/vu5Vn7koglg/s1600/screenshot+4.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/--1eadHIaueY/UyyBV2T6vXI/AAAAAAAAKwI/vu5Vn7koglg/s1600/screenshot+4.jpg" height="289" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Posteriormente seleccionamos los objetos que incluiremos en el modelo, dado que este será un ejemplo simple y básico, seleccionaremos la Tabla Empleados. Y le colocamos el nombre a nuestro modelo</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-dg2EhUw7ZRQ/UyyBcwMY7QI/AAAAAAAAKwQ/Dm4wAcEEF0o/s1600/screenshot+6.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-dg2EhUw7ZRQ/UyyBcwMY7QI/AAAAAAAAKwQ/Dm4wAcEEF0o/s1600/screenshot+6.jpg" height="289" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Luego de este último paso, podremos observar que se creado nuestro Modelo Entidad Relación, dado que es un ejemplo extremadamente simple, vemos que se compone de una única clase.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-gdOHnmF5ozk/UyyBhp227EI/AAAAAAAAKwY/fL655lTr0k4/s1600/screenshot+7.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-gdOHnmF5ozk/UyyBhp227EI/AAAAAAAAKwY/fL655lTr0k4/s1600/screenshot+7.jpg" height="260" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><i>Realizamos una generación del proyecto, para que se compilen las clases, y podamos relacionarla, con un Controlador, y las Vistas.</i></span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Posteriormente, sobre la carpeta "Controllers" Agregamos un nuevo Controlador, le colocamos el nombre, teniendo en cuenta de mantener el sufijo Controllers dentro de su nombre. También seleccionamos la clase del Modelo, y la clase del Contexto de Datos.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-NMhGF-WNCVM/UyyDVLVfIdI/AAAAAAAAKwk/DdsN4wjpUv0/s1600/screenshot+8.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-NMhGF-WNCVM/UyyDVLVfIdI/AAAAAAAAKwk/DdsN4wjpUv0/s1600/screenshot+8.jpg" height="213" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Al Agregar el controlador, con la plantilla seleccionado, se creará tanto el controlador, como las vistas que realizan las acciones de Crear / Editar / Borrar y Listar.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Si ejecutamos la aplicación y accedemos dentro de la URL inicial de la aplicación , a la carpeta Empleados, veremos el sistema en ejecución, el cual nos permitirá gestionar los datos de los empleados.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div>";s:12:"link_replies";s:160:"http://netdesa.blogspot.com/feeds/401974355383216972/comments/defaulthttp://netdesa.blogspot.com/2014/03/aplicacion-aspnet-mvc-y-adonet-entity.html#comment-form";s:9:"link_edit";s:81:"http://www.blogger.com/feeds/6641324837810394798/posts/default/401974355383216972";s:9:"link_self";s:81:"http://www.blogger.com/feeds/6641324837810394798/posts/default/401974355383216972";s:4:"link";s:78:"http://netdesa.blogspot.com/2014/03/aplicacion-aspnet-mvc-y-adonet-entity.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:5;a:11:{s:2:"id";s:70:"tag:blogger.com,1999:blog-6641324837810394798.post-7667373179383568465";s:9:"published";s:29:"2014-03-20T13:21:00.000-03:00";s:7:"updated";s:29:"2014-03-20T13:21:22.069-03:00";s:5:"title";s:40:"Estructura de una aplicación ASP.NET MVC";s:12:"atom_content";s:6970:"<div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Analizaremos la estructura de carpetas de una aplicación ASP.NET MVC.</span></div><br /><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: 'Trebuchet MS', sans-serif;">Creamos un nuevo Proyecto: ASP.NET MVC 4 Web Application, y lo colocamos un nombre al mismo, por ejemplo: MvcAppWeb.</span></div><br /><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">En el Cuadro de Diálogo seleccionamos la plantilla "Internet Application", y el Motor de Vistas "Razor". También se da la posibilidad de crear un test de prueba unitario, pero por ahora lo dejamos deshabilitado.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">De esta manera se habrá creado una aplicación web, la cual ya posee un contenido predefinido, el cual se irá editando para armar la solución deseada. De todas maneras, lo importante en este punto es analizar la estructura de la aplicación ASP.NET MVC.</span></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-mn0Maveft1M/UysMx5bisEI/AAAAAAAAKvg/z6arqFi6Bl8/s1600/screenshot+1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-mn0Maveft1M/UysMx5bisEI/AAAAAAAAKvg/z6arqFi6Bl8/s1600/screenshot+1.jpg" height="320" width="245" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">La estructura de carpetas es igual en toda aplicación MVC (aunque puede ser que de acuerdo a la versión del framework MVC haya carpetas que no estén en una aplicación web), esta convención de nombres y carpetas hace más fácil al desarrollador entender los proyectos MVC.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">La aplicación se compone de:</span></div><br /><ul><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Carpetas de Información sobre la aplicación:</span></li><ul><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Properties</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">References</span></li></ul><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Carpetas propias de la aplicación:</span></li><ul><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>App_Data</u>: En esta carpeta se almacenan los datos de la aplicación, generalmente bases de datos de Microsoft SQL. Por defecto, al crear la aplicación esta carpeta esta vacía.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>App_Start</u>: Esta carpeta contiene los archivos de código que se ejecuta, para realizar todas las configuraciones necesarias, al iniciarse la aplicación.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Content</u>: Carpeta usada para contenido estático, tal como hojas de estilos CSS, iconos, imágenes, temas.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Controllers</u>: Los archivos de clases de controladores se alojan en esta carpeta. MVC requiere que todos los archivos de controladores finalicen con el texto "Controller". Los Controladores son aquellas clases que reciben las peticiones HTTP desde la Aplicación y realizan las gestiones correspondientes.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Filters</u>: Carpeta en la cual se ubican los archivos de filtros. Los filtros son clases que permiten incluir comportamiento antes y después de las acciones de los controladores. De esta manera se puede añadir cierta funcionalidad a los controladores evitando reescribir la misma lógica una y otra vez.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Images</u>: Esta carpeta contiene imágenes usadas por la aplicación. Debe tenerse en cuenta de que&nbsp;imágenes&nbsp;se alojarán en esta ubicación, ya que si las mismas son imágenes que hacen al aspecto visual de la aplicación deben ir en la carpeta Content, ya que se trata de contenido estático. Supongamos que tenemos una aplicación que muestra la foto de los empleados, dichas fotos se almacenarían en este directorio, ya que se trata de contenido dinámico que depende de los datos de la aplicación.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Models</u>: Directorio, que contiene las clases que representan el modelo de la aplicación. Los Modelos son los encargador de manipular los datos de la aplicación.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Scripts</u>: En esta carpeta se almacenan todos los archivos javascript (*.js). Es decir todo el código que se ejecuta en la parte del cliente.</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Views</u>: Aquí se encuentran alojados los archivos de Vistas, es decir todos los archivos relacionados con la "Interface de Usuario" de la aplicación. En la carpeta de Vistas, existe una carpeta por cada controlador existente en la aplicación. También dentro de esta se encuentra la carpeta <u>Shared</u>, la cual posee Vistas que serán reutilizadas en otras vistas, entre ellas _Layout.cshtml la cual posee un comportamiento similar a las MasterPages de los WebForms.</span></li></ul><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Archivos de Configuración:</span></li><ul><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Global.asax</u>: Este archivo es la clase de entrada a nuestra aplicación, a partir del método Application_Start().</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">packages.config</span></li><li style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>web.config</u>: es un archivo XML que posee toda la configuración de la aplicación.</span></li></ul></ul>";s:12:"link_replies";s:163:"http://netdesa.blogspot.com/feeds/7667373179383568465/comments/defaulthttp://netdesa.blogspot.com/2014/03/estructura-de-una-aplicacion-aspnet-mvc.html#comment-form";s:9:"link_edit";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/7667373179383568465";s:9:"link_self";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/7667373179383568465";s:4:"link";s:80:"http://netdesa.blogspot.com/2014/03/estructura-de-una-aplicacion-aspnet-mvc.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:6;a:11:{s:2:"id";s:70:"tag:blogger.com,1999:blog-6641324837810394798.post-4752718358232511041";s:9:"published";s:29:"2014-03-19T15:54:00.001-03:00";s:7:"updated";s:29:"2014-03-19T15:54:16.036-03:00";s:5:"title";s:29:"Aplicación MVC + Razor Simple";s:12:"atom_content";s:15542:"<span style="font-family: Trebuchet MS, sans-serif;">MVC, Modelo Vista Controlador, es un patrón de arquitectura de una aplicación, el cual define una clara separación entre la interfaz del usuario, y la capa de negocios de la aplicación.&nbsp;</span><br /><span style="font-family: Trebuchet MS, sans-serif;">Como su nombre lo indica, las tres partes principales de este patrón son:</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><u>Controlador</u>: Es el elemento encargo de recibir y procesar la peticiones HTTP, desde el usuario, y se encarga de comunicarse con el Modelo, para devolver la Vista correcta. Es el corazón del patrón, se encarga de coordinar la ejecución, generar el modelo y devolver la vista.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><u>Modelo</u>: Es la capa de datos y entidades de la aplicación.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"></span><br /><span style="font-family: Trebuchet MS, sans-serif;"><u>Vista</u>: Es la que recibe los datos del modelo, para representarlos visualmente.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">La "Vista", como vimos en la entrada previa, puede ser renderizada en la forma clásica aspx, en Razor, o en otras formas más. Por lo tanto como último paso el motor de renderizado del ASP.NET MVC se encarga de traducir la vista, de acuerdo al View Engine utilizado para devolver al usuario los datos.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">A continuación procedemos a crear una aplicación básica ASP.NET MVC utilizando el Motor de renderizado RAZOR.</span><br /><br /><span style="font-family: Trebuchet MS, sans-serif;"><b><u>a) CREAR LA APLICACION ASP.NET MVC</u></b></span><br /><br /><span style="font-family: Trebuchet MS, sans-serif;">Dentro de Microsoft Visual Studio, se debe "Crear Nuevo Proyecto..."</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Se selecciona dentro del árbol VISUAL C# -&gt; Web, y se selecciona ASP.NET MVC 4 Web Application.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Se ingresa un nombre para el proyecto (.csproj), la ruta donde se guardaran los archivos, y un nombre para la solución(sln).</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-G2Z0Oe31OG8/UynV7Kr-jfI/AAAAAAAAKs8/3LPCaTOL_K8/s1600/captura_01.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-G2Z0Oe31OG8/UynV7Kr-jfI/AAAAAAAAKs8/3LPCaTOL_K8/s1600/captura_01.jpg" height="195" width="320" /></a></div><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Posteriormente se debe seleccionar una plantilla, "Empty", y el View Engine "Razor".</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-tm8_fP7egmY/UynV7IFJDfI/AAAAAAAAKtE/DsS7NOXiw5I/s1600/captura_02.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-tm8_fP7egmY/UynV7IFJDfI/AAAAAAAAKtE/DsS7NOXiw5I/s1600/captura_02.jpg" height="290" width="320" /></a></div><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Luego de haber creado el proyecto, se puede apreciar en el explorador de soluciones el grupo de carpetas y archivos que han sido creadas automáticamente.</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-qp6lm9kMRiY/UynV6_cEWlI/AAAAAAAAKs4/KOWIYayXSmk/s1600/captura_03.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-qp6lm9kMRiY/UynV6_cEWlI/AAAAAAAAKs4/KOWIYayXSmk/s1600/captura_03.jpg" /></a></div><br /><span style="font-family: Trebuchet MS, sans-serif;"><b><u>b) CREAR UN MODELO</u></b></span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">En el explorador de soluciones, click derecho sobre la Carpeta MODELS, Agregar -&gt; Clase.</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-ET596ZDve7I/UynV7yu2qkI/AAAAAAAAKtM/Y2cetkNGmms/s1600/captura_04.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-ET596ZDve7I/UynV7yu2qkI/AAAAAAAAKtM/Y2cetkNGmms/s1600/captura_04.jpg" height="193" width="320" /></a></div><br /><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Se ingresa un nombre a la clase, para este ejemplo UsuarioModel.cs</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-_FTU2JfNXlw/UynWstjd7FI/AAAAAAAAKto/aBId3hNvQqo/s1600/screenshot+8.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-_FTU2JfNXlw/UynWstjd7FI/AAAAAAAAKto/aBId3hNvQqo/s1600/screenshot+8.jpg" height="185" width="320" /></a></div><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Un Modelo es una Clase con propiedades. Las propiedades que definamos en el modelo deben estar de acuerdo a la Interface de Usuario.</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-is_Qb_J36-I/UynWs_FEXkI/AAAAAAAAKt0/0MPvKuroYjY/s1600/screenshot+9.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-is_Qb_J36-I/UynWs_FEXkI/AAAAAAAAKt0/0MPvKuroYjY/s1600/screenshot+9.jpg" height="229" width="320" /></a></div><br /><span style="font-family: Trebuchet MS, sans-serif;"><b><u>c) CREAR UN CONTROLADOR</u></b></span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Se debe crear un controlador.&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif;">En el explorador de soluciones, click derecho sobre la Carpeta CONTROLLERS, Agregar -&gt; Controller.</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-lC36lgdP58s/UynWridfM3I/AAAAAAAAKtY/pXUX78VXkCk/s1600/screenshot+10.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-lC36lgdP58s/UynWridfM3I/AAAAAAAAKtY/pXUX78VXkCk/s1600/screenshot+10.jpg" height="229" width="320" /></a></div><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Se le coloca el nombre teniendo en cuenta de dejar el sufijo controller</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-_hdQ3AEFK4w/UynWr-SNTRI/AAAAAAAAKtg/tluKLWAVL9E/s1600/screenshot+11.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-_hdQ3AEFK4w/UynWr-SNTRI/AAAAAAAAKtg/tluKLWAVL9E/s1600/screenshot+11.jpg" height="229" width="320" /></a></div><br /><span style="font-family: Trebuchet MS, sans-serif;">Se crear un controlador vacío, aunque ya es agregada por defecto el método de Acción "Index".</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-lLi7GqXtuco/UynYB-CHsAI/AAAAAAAAKuE/BG-T2Szx7Oc/s1600/screenshot+4.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-lLi7GqXtuco/UynYB-CHsAI/AAAAAAAAKuE/BG-T2Szx7Oc/s1600/screenshot+4.jpg" height="231" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;"><b><u>d) CREAR UNA VISTA</u></b></span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Para crear la Vista correspondiente al ActionResult Index, del Controlador UsuarioController, se debe hacer click con el botón derecho en el código correspondiente el método de Acción, y posteriormente hacer click en "Agregar Vista".</span><br /><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-ZdTCLaw0FeQ/UynWr26-y2I/AAAAAAAAKtc/pzO4k7MkxeA/s1600/screenshot+13.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-ZdTCLaw0FeQ/UynWr26-y2I/AAAAAAAAKtc/pzO4k7MkxeA/s1600/screenshot+13.jpg" height="263" width="320" /></a></div><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">En el momento de crear la vista pueden definirse una seria de opciones, tales como el Motor de renderizado, se puede determinar si es una vista fuertemente tipada, es decir relacionada directamente a un modelo, en este caso la relacionamos al modelo creada previamente UsuarioModel.</span><br /><span style="font-family: Trebuchet MS, sans-serif;">También puede determinarse si se desea crear una vista vacía, una vista de detalle de datos, de alta de datos, de edición, de eliminación o de listado.</span><br /><span style="font-family: Trebuchet MS, sans-serif;">Por último puede determinarse el nombre de la master page, layout, la cual estaría alojada dentro de la carpeta Shared. Para este ejemplo en particular trabajeremos sin Layout Master.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-7rYuKhDHE0M/UynYoBLfEvI/AAAAAAAAKuU/7NrqwHYSas8/s1600/screenshot+1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-7rYuKhDHE0M/UynYoBLfEvI/AAAAAAAAKuU/7NrqwHYSas8/s1600/screenshot+1.jpg" height="231" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Como puede verse se crea el código de la vista, con el renderizado Razor.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-P4jlpWFpapM/UynZvW03H_I/AAAAAAAAKug/lfZAe_2Pu4M/s1600/screenshot+5.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-P4jlpWFpapM/UynZvW03H_I/AAAAAAAAKug/lfZAe_2Pu4M/s1600/screenshot+5.jpg" height="231" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">En este momento, si se inicia la aplicación, y accedemos dentro de nuestro servidor de desarrollo a la carpeta:&nbsp;http://localhost/Usuario (tal y como es el nombre del controlador) estariamos recuperando la Vista INDEX de dicho Controlador. Para el ejemplo, una página en blanco.</span><br /><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Ahora realizamos una serie de modificaciones en el código, primero dentro del controlador, realizamos una llamada al paquete Models de nuestra aplicación, y dentro del método de Acción de la llamada al Index, creamos una nueva instancia del Modelo Usuario, y se la pasamos a la Vista (dado que esta esta fuertemente tipada).</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">var usuarioModelo = new UsuarioModel()&nbsp;</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IdUsuario=1,</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Nombre="Sebastián",</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Email="loquesea@gmail.com"&nbsp;</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">return View(usuarioModelo);</span><br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-J1qRqgfWPMU/UynmAb_8fpI/AAAAAAAAKuw/vKrAE76SX78/s1600/screenshot+6.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-J1qRqgfWPMU/UynmAb_8fpI/AAAAAAAAKuw/vKrAE76SX78/s1600/screenshot+6.jpg" height="231" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><span style="font-family: Trebuchet MS, sans-serif;">Y por último dentro del contenido de la vista, mostramos el nuevo usuario creado, por medio de una label para el titulo, y una caja de texto para el valor</span><br /><br />&nbsp; &nbsp; <span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&lt;div&gt;</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; @*Codigo Razor =&gt; Muestra el Nombre*@</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;span&gt;@Html.LabelFor(m=&gt;m.Nombre)&lt;/span&gt;</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;span&gt;@Html.TextBoxFor(m=&gt;m.Nombre)&lt;/span&gt;</span><br /><span style="font-family: Courier New, Courier, monospace; font-size: x-small;">&nbsp; &lt;/div&gt;</span><br /><div><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-djdYhkfIGSs/Uynm0b5QskI/AAAAAAAAKu4/lAAFUQdcWVA/s1600/screenshot+7.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://4.bp.blogspot.com/-djdYhkfIGSs/Uynm0b5QskI/AAAAAAAAKu4/lAAFUQdcWVA/s1600/screenshot+7.jpg" height="231" width="320" /></a></div><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Si ahora se inicia nuevamente la aplicación, y accedemos dentro de nuestro servidor de desarrollo a la carpeta:&nbsp;http://localhost/Usuario, se observarán en acción los cambios realizados.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-vvefb7LgjGg/UynnYIyOy0I/AAAAAAAAKvA/8f5vXnhBPO0/s1600/screenshot+8.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-vvefb7LgjGg/UynnYIyOy0I/AAAAAAAAKvA/8f5vXnhBPO0/s1600/screenshot+8.jpg" /></a></div><span style="font-family: 'Trebuchet MS', sans-serif;">Hasta aquí esta primera aplicación simple en MVC con Motor RAZOR, más adelante iremos agregando funcionalidades extras, como conexiones a base de datos, Altas, Bajas, Consultas y Actualizaciones de datos.</span></div>";s:12:"link_replies";s:151:"http://netdesa.blogspot.com/feeds/4752718358232511041/comments/defaulthttp://netdesa.blogspot.com/2014/03/aplicacion-mvc-razor-simple.html#comment-form";s:9:"link_edit";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/4752718358232511041";s:9:"link_self";s:82:"http://www.blogger.com/feeds/6641324837810394798/posts/default/4752718358232511041";s:4:"link";s:68:"http://netdesa.blogspot.com/2014/03/aplicacion-mvc-razor-simple.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}i:7;a:11:{s:2:"id";s:69:"tag:blogger.com,1999:blog-6641324837810394798.post-193825703114364456";s:9:"published";s:29:"2014-03-19T11:03:00.001-03:00";s:7:"updated";s:29:"2014-03-19T17:16:04.191-03:00";s:5:"title";s:37:"Introducción al Motor de Vistas Razor";s:12:"atom_content";s:12860:"<div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Una aplicación ASP.NET MVC, soporta diferentes Motores de Vistas (View Engine), los cuales definen la manera en que se estructura la página HTML.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Uno de estos motores de vistas, es el clásico .<i>aspx</i>/.<i>ascx</i>/.<i>master</i> &nbsp;utilizado en los Web Forms de ASP.NET.&nbsp;</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;">Razor es un motor de vista, que permite embeber código C# dentro de una página, sin utilizar los delimitadores &lt;%=%&gt;. Los archivos basados en este motor de vistas, poseen la extensión .<i>cshtml</i>.</span><br /><span style="font-family: Trebuchet MS, sans-serif;"><br /></span><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-RJTkDCGaShU/Uyn6-i2qkYI/AAAAAAAAKvQ/qQKol866J3k/s1600/a14.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-RJTkDCGaShU/Uyn6-i2qkYI/AAAAAAAAKvQ/qQKol866J3k/s1600/a14.jpg" height="231" width="320" /></a></div><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><u>Bloque de Sentencia Simple</u>.</span><br /><span style="font-family: 'Trebuchet MS', sans-serif;">Cada bloque de código debe comenzar con el símbolo @, y posteriormente debe ir encerrado entre llaves { } el código C# correspondiente.</span></div><div style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><br /></span></div><pre>@{ var mensaje = "Hola Mundo"; }<br />El Mensaje de esta página es : @mensaje<br /></pre><pre></pre><pre></pre><pre></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">En este bloque se asigno a una variable una cadena de texto "Hola Mundo", posteriormente, fuera del bloque, dicha variable es accesible globalmente por medio del caracter @.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">El Bloque anterior generaría una página HTML, la cual le muestra al usuario el texto:</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre style="text-align: center;"><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">El Mensaje de esta página es : Hola Mundo</span></pre><pre style="text-align: center;"><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre style="text-align: center;"><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u>Bloque de Múltiples Sentencias</u>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">Cuando se trabaja con un grupo de sentencias, para generar un resultado, la forma de trabajar es exactamente igual que en el caso previo, pero teniendo en cuenta de&nbsp;</span><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify;">finalizar cada línea con punto y coma.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify;"><br /></span></pre><pre>@{<br />    var montoinicial = 100;<br />    var interes = 12;<br />    var montofinal = (montoinicial * interes) / 100;<br />}</pre><pre>Aplicando al monto inicial @montoinicial un interés del @interes % nos da como reresultado @montofinal</pre><pre></pre><pre></pre><pre></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u>Condicionales</u>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">Con el Motor de Vistas Razor, puede definirse un condicional dentro de bloque Razor o fuera del mismo, como puede observarse en el siguiente ejemplo.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre></pre><pre></pre><pre>@{<br />var esValido = true;</pre><pre>if(esValido)<br />{<br />   &nbsp;&lt;p&gt;Probando un Condicional dentro de bloque Razor, entrada positiva&lt;/p&gt;</pre><pre>}<br />else<br />{<br />   &nbsp;&lt;p&gt;Probando un Condicional dentro de bloque Razor, entrada negativa&lt;/p&gt;;</pre><pre>}<br />}</pre><pre></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u>Bucles</u>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">Puede incluirse dentro de una páginas ASP.NET MVC con Motor de Vistas RAZOR, los mismos bucles que se utilizan en la programación C#, es decir, for, while do while, foreach</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre></pre><pre>@{&nbsp;</pre><pre></pre><pre>for(var cont=1, cont&lt;=3, cont++) {</pre><pre>    &lt;p&gt;Contador es @cont&lt;/p&gt;</pre><pre>}</pre><pre></pre><pre>string[] nombres = {"Juan","Jose","Maria"};</pre><pre>foreach(var nombre in nombres) {</pre><pre>    &lt;p&gt;El Nombre es @nombre&lt;/p&gt;</pre><pre>}</pre><pre></pre><pre>var contador=1;</pre><pre>do {</pre><pre>  &lt;p&gt;Este es el paso @contador por el Bucle DO&lt;/p&gt;</pre><pre>  contador++;</pre><pre>} while(contador&lt;3);</pre><pre></pre><pre>}</pre><pre></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u>Comentarios</u>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">Existen 3 maneras de realizar comentarios en un bloque RAZOR, las dos primeras son las clásicas utilizadas por C#, es decir, anteponer a una línea los caracteres <b>//</b> o encerrar un bloque entre <b>/* */</b>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">Además de estas, RAZOR incluye la posibilidad de comentar un bloque de texto, encerrando el mismo entre los caracteres <b>@* &nbsp; *@</b>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u><br /></u></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><u>Utilizar Objetos Propios del C#</u>.</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;">Anteponiendo siempre el caracter @, o bien encerrando código dentro de un bloque RAZOR, se puede acceder a los objetos, y sus propiedades, tal como puede verse en el siguiente ejemplo:</span></pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre>Hoy es @System.DateTime.Now.Date.ToString("D"), y la hora es @System.DateTime.Now</pre><pre><span style="font-family: 'Trebuchet MS', sans-serif; text-align: justify; white-space: normal;"><br /></span></pre><pre style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><span style="white-space: normal;"><br /></span></span></pre><pre style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><span style="white-space: normal;"><br /></span></span></pre><pre style="text-align: justify;"><span style="font-family: Trebuchet MS, sans-serif;"><span style="white-space: normal;">Hasta aquí esta breve introducción a Razor, la cual brinda las bases para comenzar a utilizar este motor de vistas.</span></span></pre>";s:12:"link_replies";s:160:"http://netdesa.blogspot.com/feeds/193825703114364456/comments/defaulthttp://netdesa.blogspot.com/2014/03/introduccion-al-motor-de-vistas-razor.html#comment-form";s:9:"link_edit";s:81:"http://www.blogger.com/feeds/6641324837810394798/posts/default/193825703114364456";s:9:"link_self";s:81:"http://www.blogger.com/feeds/6641324837810394798/posts/default/193825703114364456";s:4:"link";s:78:"http://netdesa.blogspot.com/2014/03/introduccion-al-motor-de-vistas-razor.html";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";}}s:7:"channel";a:11:{s:2:"id";s:45:"tag:blogger.com,1999:blog-6641324837810394798";s:7:"updated";s:29:"2018-03-07T17:32:00.873-03:00";s:5:"title";s:14:"Desarrollo.NET";s:8:"subtitle";s:75:"Conceptos sobre Programación ASP.NET, C#, MVC, Entity Framework, Javascript";s:42:"link_http://schemas.google.com/g/2005#feed";s:47:"http://netdesa.blogspot.com/feeds/posts/default";s:9:"link_self";s:62:"http://www.blogger.com/feeds/6641324837810394798/posts/default";s:4:"link";s:28:"http://netdesa.blogspot.com/";s:8:"link_hub";s:32:"http://pubsubhubbub.appspot.com/";s:11:"author_name";s:5:"SR_SN";s:12:"author_email";s:19:"noreply@blogger.com";s:9:"generator";s:7:"Blogger";}s:9:"textinput";a:0:{}s:5:"image";a:0:{}s:9:"feed_type";s:4:"Atom";s:12:"feed_version";N;s:8:"encoding";s:10:"ISO-8859-1";s:16:"_source_encoding";s:0:"";s:5:"ERROR";s:0:"";s:7:"WARNING";s:0:"";s:19:"_CONTENT_CONSTRUCTS";a:6:{i:0;s:7:"content";i:1;s:7:"summary";i:2;s:4:"info";i:3;s:5:"title";i:4;s:7:"tagline";i:5;s:9:"copyright";}s:16:"_KNOWN_ENCODINGS";a:3:{i:0;s:5:"UTF-8";i:1;s:8:"US-ASCII";i:2;s:10:"ISO-8859-1";}s:5:"stack";a:0:{}s:9:"inchannel";b:0;s:6:"initem";b:0;s:9:"incontent";b:0;s:11:"intextinput";b:0;s:7:"inimage";b:0;s:17:"current_namespace";b:0;s:15:"source_encoding";s:5:"UTF-8";s:4:"etag";s:70:"W/"c98c9ef7b3e0babd1016d47ce29438ec5f02771646002982b2678320de5e10ee"
";s:13:"last_modified";s:31:"Wed, 07 Mar 2018 20:32:00 GMT
";}